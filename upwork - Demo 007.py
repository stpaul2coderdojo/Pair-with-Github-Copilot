from this import d


/*Twilio Conversational Bot
Scripting & Automation
Posted 2 days ago
Worldwide
Looking to create a conversational 
Bot on Twilio Platform that will support whatsapp, SMS, IVR, slack and telegram.

The Bot will just have a simple
 functionality to accept audio messages  the users and storing it on google/aws cloud. 
 The bot will then send a feedback report to the users which will be generated by our algorithms on the cloud. 

The entire app should be available as an API
 as well for anyone to use. Full requirements document will be provided to the shortlisted candidates, please ask.*/
    
%function to store a MP3 to google cloud 
def store_mp3(mp3_file):
    #upload the file to google cloud
    #return the url of the file
    return "https://storage.googleapis.com/twilio-conversational-bot-audio/mp3/{}".format(mp3_file)
    
%function to store a MP3 to aws cloud
def store_mp3(mp3_file):
    #upload the file to aws cloud
    #return the url of the file
    return "https://s3.amazonaws.com/twilio-conversational-bot-audio/mp3/{}".format(mp3_file)


%python function to create a twilio assistant
def create_twilio_assistant(name, locale):
    #create a twilio assistant
    #return the twilio assistant object
    import os
    from twilio.rest import Client


    # Find your Account SID and Auth Token at twilio.com/console
    # and set the environment variables. See http://twil.io/secure
    account_sid = os.environ['TWILIO_ACCOUNT_SID']
    auth_token = os.environ['TWILIO_AUTH_TOKEN']
    client = Client(account_sid, auth_token)

    assistant = client.autopilot.assistants.create()

    print(assistant.sid)
    return      assistant.sid

%python function given twilio assistant sid, to record voicemail
def record_voicemail(sid):
    #record voicemail
    #return the url of the file
    return "https://api.twilio.com/autopilot/v1/assistants/{}/recordings".format(sid)

% define function to upload MP3 from a url to AWS S3 in directory d
def uploadUrltoAWSS3(url):
    #upload the file to aws cloud
    #return the url of the file
    return "https://s3.amazonaws.com/twilio-conversational-bot-audio/mp3/{}".format(url)
    







    #upload the file to google cloud
    #return the url of the file
    return "https://storage.googleapis.com/twilio-conversational-bot-audio/mp3/{}".format(url)
%python function to integrate whatsapp to assistant autopilot defined in create_twilio_assistant
def integrate_whatsapp(assistant_sid, whatsapp_number):
    #integrate whatsapp to the twilio assistant
    #return the twilio assistant object
    import os
    from twilio.rest import Client


    # Find your Account SID and Auth Token at twilio.com/console
    # and set the environment variables. See http://twil.io/secure
    account_sid = os.environ['TWILIO_ACCOUNT_SID']
    auth_token = os.environ['TWILIO_AUTH_TOKEN']
    client = Client(account_sid, auth_token)

    assistant = client.autopilot.assistants(assistant_sid).whatsapp_integration.create(whatsapp_number=whatsapp_number)

    print(assistant.sid)
    return      assistant.sid

%python function to integrate slack to assistant autopilot defined in create_twilio_assistant
def integrate_slack(assistant_sid, slack_channel):
    #integrate slack to the twilio assistant
    #return the twilio assistant object
    import os
    from twilio.rest import Client


    # Find your Account SID and Auth Token at twilio.com/console
    # and set the environment variables. See http://twil.io/secure
    account_sid = os.environ['TWILIO_ACCOUNT_SID']
    auth_token = os.environ['TWILIO_AUTH_TOKEN']
    client = Client(account_sid, auth_token)

    assistant = client.autopilot.assistants(assistant_sid).slack_integration.create(slack_channel=slack_channel)

    print(assistant.sid)
    return      assistant.sid

%python function to integrate telegram to assistant autopilot defined in create_twilio_assistant
def integrate_telegram(assistant_sid, telegram_channel):
    #integrate telegram to the twilio assistant
    #return the twilio assistant object
    import os
    from twilio.rest import Client


    # Find your Account SID and Auth Token at twilio.com/console
    # and set the environment variables. See http://twil.io/secure
    account_sid = os.environ['TWILIO_ACCOUNT_SID']
    auth_token = os.environ['TWILIO_AUTH_TOKEN']
    client = Client(account_sid, auth_token)

    assistant = client.autopilot.assistants(assistant_sid).telegram_integration.create(telegram_channel=telegram_channel)

    print(assistant.sid)
    return      assistant.sid

%AWS lambda in python with trigger, S3 file upload
def aws_lambda_function(event, context):
    console.log('Loading function');
        
    const aws = require('aws-sdk');

    const s3 = new aws.S3({ apiVersion: '2006-03-01' });

    exports.handler = async (event, context) => {
    //console.log('Received event:', JSON.stringify(event, null, 2));

    // Get the object from the event and show its content type
    const bucket = event.Records[0].s3.bucket.name;
    const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
    const params = {
        Bucket: bucket,
        Key: key,
    }; 
    %run proprietry code
    proprietry();
    try {
        const { ContentType } = await s3.getObject(params).promise();
        console.log('CONTENT TYPE:', ContentType);
        return ContentType;
    } catch (err) {
        console.log(err);
        const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;
        console.log(message);
        throw new Error(message);
    }
};
              

